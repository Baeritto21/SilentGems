buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'maven'
    id 'maven-publish'
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'

repositories {
    flatDir {
        name "fileRepo"
        dirs "repo"
    }
    mavenLocal()
    jcenter()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs = ['-Xlint:deprecation']
}

javadoc {
    failOnError = false
}

archivesBaseName = jar_name
def versionInfo = getModVersion()
System.out.println(versionInfo)
def version_short = "${versionInfo['version_short']}"
version = "${versionInfo['version']}"

def gpr_creds = { // Credentials for GitHub Packages, since this is used multiple times
    username = property('gpr.username')
    password = property('gpr.token')
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: mcp_channel, version: mcp_mappings

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            mods {
                silentgems {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            mods {
                silentgems {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            args '--mod', mod_id, '--all',
                    '--existing', file('src/main/resources').toString(),
                    '--existing', file('src/generated/resources').toString(),
                    '--output', file('src/generated/resources/')

            mods {
                silentgems {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    jcenter()
    mavenLocal()
    maven {
        url = uri("https://maven.pkg.github.com/silentchaos512/silentlib")
        credentials gpr_creds
    }
    maven {
        url = uri("https://maven.pkg.github.com/silentchaos512/silent-utils")
        credentials gpr_creds
    }
    maven {
        url = uri("https://maven.pkg.github.com/silentchaos512/silent-gear")
        credentials gpr_creds
    }
    maven { // JEI
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven { // JEI
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven { // Curios
        url = "https://maven.theillusivec4.top/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.forge_version}"

    compile fg.deobf("net.silentchaos512:silent-lib:${project.silent_lib_version}") {
        exclude module: "forge"
    }
    compile fg.deobf("net.silentchaos512:silent-gear:${project.silent_gear_version}") {
        exclude module: 'forge'
        exclude module: 'jei-1.16.3'
        exclude module: 'silent-lib-1.16.3'
        exclude module: 'curios-forge'
        exclude module: 'Bookshelf-1.16.3'
        exclude module: 'GameStages-1.16.3'
        exclude module: 'World-Stripper'
    }

    if (project.hasProperty('token_enchanter_version')) {
        compileOnly fg.deobf("net.silentchaos512:token-enchanter:${project.token_enchanter_version}:api") {
            exclude module: 'forge'
            exclude module: 'jei-1.16.3'
            exclude module: 'silent-lib-1.16.3'
        }
        runtimeOnly fg.deobf("net.silentchaos512:token-enchanter:${project.token_enchanter_version}") {
            exclude module: 'forge'
            exclude module: 'jei-1.16.3'
            exclude module: 'silent-lib-1.16.3'
        }
    }

    // JEI
    if (project.hasProperty('jei_version')) {
        compileOnly fg.deobf("mezz.jei:jei-${project.jei_version}:api")
        runtimeOnly fg.deobf("mezz.jei:jei-${project.jei_version}")
    }

    // HWYLA
    if (project.hasProperty('hwyla_version')) {
        compileOnly "mcp.mobius.waila:Hwyla:${project.hwyla_version}"
    }

    // Curios
    if (project.hasProperty('curios_version')) {
        compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios_version}:api")
        runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios_version}")
    }
}

jar {
    manifest {
        attributes(["Specification-Title"     : mod_name,
                    "Specification-Vendor"    : author,
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : version_short,
                    "Implementation-Vendor"   : author,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.getDestinationDir()
}

artifacts {
    archives sourcesJar
}

curseforge {
    if (project.hasProperty('cf_project_id') && project.hasProperty('cf_release_type') && project.hasProperty('cf_changelog_filename') &&
            ((project.cf_release_type == 'alpha') || (project.cf_release_type == 'beta') || (project.cf_release_type == 'release'))) {
        apiKey = property('curseforge.apiKey')
        project {
            id = project.cf_project_id
            changelog = file(project.cf_changelog_filename)
            releaseType = project.cf_release_type
            addGameVersion(mc_version)
            addGameVersion('1.16.4')
            addGameVersion('1.16.5')
            mainArtifact(jar) {
                relations {
                    requiredDependency 'silent-lib'
                    optionalDependency 'silent-gear'
                    optionalDependency 'token-enchanter'
                }
            }
        }
    }
}

// GPR/Maven publishing

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/silentchaos512/${repo_name}")
            credentials gpr_creds
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

// Version stuff

def getModVersion() {
    try {
        return getGitVersion()
    } catch (Exception ex) {
        System.out.println("Git version failed, falling back to gradle.properties")
        return makeVersionMap(project.build_version + '-' + getGitHash())
    }
}

def getGitVersion() {
    // Call git command
    def outStream = new ByteArrayOutputStream()
    def result = exec {
        executable = 'git'
        args = ['describe', '--long']
        standardOutput = outStream
    }

    def fullVersion = outStream.toString()
    return makeVersionMap(fullVersion)
}

def getGitHash() {
    def outStream = new ByteArrayOutputStream()
    def result = exec {
        executable = 'git'
        args = ['rev-parse', 'HEAD']
        standardOutput = outStream
    }

    return outStream.toString().trim().substring(0, 6)
}

def makeVersionMap(version) {
    def matcher = version.trim() =~ /(\d+).(\d+).(\d+)-(.*)/

    def maj = matcher[0][1]
    def min = matcher[0][2]
    def rev = matcher[0][3]

    return makeVersionMap(maj, min, rev, matcher[0][4])
}

def makeVersionMap(maj, min, rev, githash) {
    def out = [:]
    out['build.major.number'] = maj.toString()
    out['build.minor.number'] = min.toString()
    out['build.revision.number'] = rev.toString()
    out['build.githash'] = githash
    out['version_short'] = "${maj}.${min}.${rev}".toString()
    out['version'] = "${project.mc_version}-${maj}.${min}.${rev}".toString()
    return out
}
